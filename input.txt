#########################################################################
# This script is for testing the functionality of the entire game system,
# specifically the interaction between the application, processor, and I/O
# devices. Although this script is just for testing, we wanted to replicate
# a portion of the application we will need when programming the actual
# application: displaying the random numbers on the screen via the VGA.
#
# This script will display the random number generated from the LFSR on the VGA
# screen. It will then read some input from a button press, and flash the screen
# with the color of the controller that sent in the signal.
#
# Group 6
# Last Edited: 12/1/2019
#########################################################################


SETUP:

# Assuming Random number from LFSR is stored at memory address 532
# Note about LFSR: The LFSR(random number generator register) is implemented in hardware
#            and will continuously generate a random number with every clock cycle.
#                This code is on git. Because this is continuous, in the actual application
#                     I plan to store the random value for the current round in a different adr
#                       in memory. This can be seen in the memory mapping in our documentation.
.lfsr 0x0214;

# Assuming the VGA address in I/O space @ memory address 1007
.vga 0x03EF;

# Assuming "PlayerInputFlag" value is stored at memory address 530
.playerInputFlag 0x0212;

# Assuming "FirstPlayerFlag" value is stored at memory address 529
.firstPlayerFlag 0x0211;

# Assuming the first player's switch input value is stored at memory address 531
.switchValueAdr 0x0213;

# Assuming screenStatus is stored at memory address 537
.screenStatus 0x021A;

# Assuming GameStarts flag is sdtored at memory address 0x0095
.gameHasStarted 0x021B;

# Assuming gameStatus is stored in memory address 0x0089
.gameStatus 0x0210;

# Assuming winnerPlyrNum is stored in memory address 0x0096
.winnerPlyrNum 0x021C;


Main:

# Display Main Menu & set gameStatus to 0 & GameOverFlag = 0
stor R0, .screenStatus; #This flag tells I/O whether or not to display menu screen
stor R0, .gameStatus;

# Initialize player scores to 0
movi 0x15, R11;		# P1 address 0x0215
lui 0x02, R11;
stor R0, R11;

movi 0x16, R11;		# P2 address 0x0216
lui 0x02, R11;
stor R0, R11;

movi 0x17, R11;		# P3 address 0x0217
lui 0x02, R11;
stor R0, R11;

movi 0x18, R11;		# P4 address 0x0218
lui 0x02, R11;
stor R0, R11;

# Jump to wait for game to start
jal R15, WaitForGameStart;

# Dont display Main Menu
movi 0x01, R3;
stor R3, .screenStatus;

DisplayRandomValue:
   load R4, .lfsr;    # Load random number from LFSR adr s.t. R4 = random number
   stor R4, .vga;    # Display random number on VGA screen

GameInMotion:
   # Jump to WaitForPlayer
   jal R15, WaitForPlayer;

   # Jump to NothingLoop to wait for player to release button
   jal R15, NothingLoop;

   # Load first player's switch input to R9
   load R9, .switchValueAdr;

   # Jump to CheckCorrectness
   jal R15, CheckCorrectness;

   #Go to next round
   juc DisplayRandomValue;


EndMain:
   juc EndMain;




##################
# HELPER FUNCTIONS
##################

#
# Function that waits until player input is recieved
#
WaitForPlayer:
   # Once better defined in whole system --> add function caller/callee protocol
   load R6, .playerInputFlag;  # Load PlayerInputFlag value into R6
   cmp  R6, R0;  # If (PlayerInput == 0)
   jeq  WaitForPlayer;             #   loop again
   juc  R15;                           # Function ends

#
# Function does nothing until button is released
#
NothingLoop:
   load R6, .playerInputFlag;         # Reloads PlayerInputFlag value into R6
   cmpi $1, R6;
   jeq NothingLoop;
   juc  R15;            # Function ends

#
# Function waits for game to start
#
WaitForGameStart:
   load R2, .gameHasStarted;  # Load GameHasStarted value into R2
   cmp  R2, R0;  # If (GameHasStarted == 0)
   jeq  WaitForGameStart;             #   loop again
   juc  R15;                           # Function ends

#
#
#
GameInMotionAfterFail:
  movi 0x04, R3;
  stor R3, .gameStatus;  # Play Fail sound
  juc GameInMotion;

#
# Function checks if the player's input is correct answer
#
CheckCorrectness:
   cmp    R4, R9;                 # If (LFSR value != switch value)
   jne   GameInMotionAfterFail;                      #  begin waiting process again
   load R10, .firstPlayerFlag;                        # Load firstPlayerFlag into R10

   # Determine who the first player was:
   cmp R0, R10;          # If(first player == 0) a.k.a Player 1
   jeq awardFirstPlayer;  #   jump to award first player's point
   cmpi $1, R10;            # If(first player == 1) a.k.a Player 2
   jeq awardSecPlayer;        #   jump to award second player's point
   cmpi $2, R10;                # If(first player == 2) a.k.a Player 3
   jeq awardThirdPlayer;  #   jump to award third player's point
   cmpi $3, R10;            # If(first player == 3) a.k.a Player 4
   jeq awardFourthPlayer; #  jump to award fourth player's point

   awardFirstPlayer:
      movi 0x15, R11;   # assuming Player 1's point lives in memory location 533
      lui 0x02, R11;
      stor R0, .winnerPlyrNum;
      juc incrementPt;  # jump to increment point;

   awardSecPlayer:
      movi 0x16, R11;   # assuming Player 2's point lives in memory location 534
      lui 0x02, R11;
      movi 0x01, R3;
      stor R3, .winnerPlyrNum;
      juc incrementPt;    # jump to increment point;

   awardThirdPlayer:
      movi 0x17, R11;   # assuming Player 3's point lives in memory location 535
      lui 0x02, R11;
      movi 0x02, R3;
      stor R3, .winnerPlyrNum;
      juc incrementPt;  # jump to increment point;

   awardFourthPlayer:
      movi 0x18, R11;   # assuming Player 3's point lives in memory location 536
      lui 0x02, R11;
      movi 0x03, R3;
      stor R3, .winnerPlyrNum;
      juc incrementPt;    # jump to increment point;

   incrementPt:
      movi 0x02, .gameStatus;	# Play Success sound
      load R12, R11;            # Load Player's current point value into R12
      addi $1, R12;               # Player's current points + 1
      cmpi 0x0a, R12;		  # If(player's score == 10)
      jeq GameOver;
      stor R12, R11;                # Store Player's updated point back into memory
      juc CheckCorrectnessEnd;

CheckCorrectnessEnd:
   juc  R15;            # Function ends


#
# Function displays GameOver screen and jumps to EndMain
#
GameOver: #only evaluate winnerPlyerNum when screenStatus == 2
   movi 0x02, R3;
   stor R3, .screenStatus;
   juc EndMain;

